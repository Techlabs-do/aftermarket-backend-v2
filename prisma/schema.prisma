generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_TYPES {
  CUSTOMERS
  VENDORS
}

enum RECIEPT_TYPES {
  INVOICE
  BILL
}

enum RECIEPT_STATUS {
  PENDING
  DONE
}

////////////////////////////////////////////////////////////////////
// AUTH
model LoginUsers {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// CUSTOMERS/VENDORS and mapping with PRODUCT
model Users {
  id            Int               @id @default(autoincrement())
  type          USER_TYPES
  company_name  String?
  website       String?
  email         String?
  created_at    DateTime          @default(now())
  updated_at    DateTime          @default(now())
  phones        Phones[]
  addresses     Addresses[]
  reciepts      Reciepts[]
  user_products UserHasProducts[]
}

model Phones {
  id             Int    @id @default(autoincrement())
  number         String
  contact_person String
  user_id        Int
  users          Users  @relation(fields: [user_id], references: [id])
}

model Addresses {
  id      Int    @id @default(autoincrement())
  address String
  country String
  user_id Int
  users   Users  @relation(fields: [user_id], references: [id])
}

model UserHasProducts {
  id           Int           @id @default(autoincrement())
  code         String
  user_id      Int
  products_id  Int
  reciept_item RecieptItem[]
  users        Users         @relation(fields: [user_id], references: [id])
  products     Products      @relation(fields: [products_id], references: [id])
}

////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// PRODUCTS and SPECS
model Products {
  id                  Int                 @id @default(autoincrement())
  name                String
  oem                 String?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @default(now())
  user_products       UserHasProducts[]
  product_has_images  ProductHasImages[]
  Product_has_options ProductHasOptions[]
}

model ProductHasImages {
  id         Int      @id @default(autoincrement())
  url        String
  product_id Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  products   Products @relation(fields: [product_id], references: [id])
}

model ProductHasOptions {
  id             Int      @id @default(autoincrement())
  year           String?
  chasses_number String?
  product_id     Int
  options_id     Int
  regions_id     Int
  cabin_id       Int?
  cabins         Cabins?  @relation(fields: [cabin_id], references: [id])
  products       Products @relation(fields: [product_id], references: [id])
  options        Options  @relation(fields: [options_id], references: [id])
  regions        Regions  @relation(fields: [regions_id], references: [id])
}

model Options {
  id              Int                 @id @default(autoincrement())
  option          String
  parent_id       Int?
  created_at      DateTime            @default(now())
  updated_at      DateTime            @default(now())
  product_options ProductHasOptions[]
  options         Options[]           @relation("ParentOption")
  parent          Options?            @relation("ParentOption", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Regions {
  id              Int                 @id @default(autoincrement())
  region          String
  created_at      DateTime            @default(now())
  updated_at      DateTime            @default(now())
  product_options ProductHasOptions[]
}

model Cabins {
  id              Int                 @id @default(autoincrement())
  cabin           String
  created_at      DateTime            @default(now())
  updated_at      DateTime            @default(now())
  product_options ProductHasOptions[]
}

////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// RECIEPTS
model Reciepts {
  id           Int            @id @default(autoincrement())
  type         RECIEPT_TYPES
  status       RECIEPT_STATUS
  currency     String
  user_id      Int
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now())
  reciept_item RecieptItem[]
  users        Users          @relation(fields: [user_id], references: [id])
}

model RecieptItem {
  id              Int             @id @default(autoincrement())
  price           Float
  quantity        Int
  user_product_id Int
  reciept_id      Int
  reciepts        Reciepts        @relation(fields: [reciept_id], references: [id])
  user_products   UserHasProducts @relation(fields: [user_product_id], references: [id])
}

////////////////////////////////////////////////////////////////////
