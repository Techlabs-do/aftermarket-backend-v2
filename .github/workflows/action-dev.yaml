name: Build and Publish Docker Image

on:
  push:
    branches:
      - dev

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: techlabscc/aftermarket-backend-v2:dev
      CONTAINER_NAME: aftermarket-backend-v2-dev

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          file_name: '.env.development'
          envkey_DATABASE_URL: ${{ secrets.DATABASE_URL_DEV }}
          envkey_AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          envkey_AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          envkey_JWT_SECRET: ${{ secrets.JWT_SECRET }}
          envkey_SECRET_KEY_HEADER: ${{ secrets.SECRET_KEY_HEADER }}
          envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          envkey_REGION: ${{secrets.REGION}}
          envkey_BUCKET: ${{ secrets.BUCKET }}
          envkey_BUCKET_ENDPOINT: ${{ secrets.BUCKET_ENDPOINT }}
          envkey_ORIGIN: '*'
          envkey_CREDENTIALS: true
          envkey_PORT: 3000
          envkey_LOG_FORMAT: dev
          envkey_LOG_DIR: '../../../logs'

      - name: Build image
        run: docker build . -f ./Dockerfile.dev -t ${{ env.IMAGE_NAME }}

      - name: Push Image
        run: docker push ${{ env.IMAGE_NAME }}

      # - name: Deploy to LinodeServer
      #   uses: appleboy/ssh-action@v1.0.0
      #   env:
      #     CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
      #     IMAGE_NAME: ${{ env.IMAGE_NAME }}
      #   with:
      #     allenvs: true
      #     host: ${{ secrets.LINODE_SERVER_HOST }}
      #     username: ${{ secrets.LINODE_SERVER_USER }}
      #     password: ${{ secrets.LINODE_SERVER_PASSWORD }}
      #     envs: CONTAINER_NAME,IMAGE_NAME
      #     script: |
      #       docker stop $CONTAINER_NAME
      #       docker rm $CONTAINER_NAME
      #       docker rmi $IMAGE_NAME
      #       docker pull $IMAGE_NAME
      #       docker run -d --name $CONTAINER_NAME -p 1010:3000 $IMAGE_NAME
